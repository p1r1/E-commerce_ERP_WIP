using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using EmsiERP.Windows;
using ERPemsiCore;
using ERPemsiCore.src;
using ERPemsiCore.src.meta;
using MaterialDesignThemes.Wpf;

namespace EmsiERP {
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window, INotifyPropertyChanged {
        /// <summary>
        /// when a property changed invoke other ui elements
        /// this.DataContext = this; in initialize
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged([CallerMemberName] string propertyName = null) {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private double _dockPanelWidth1;
        private double _dockPanelWidth2;
        //private double totalTabWidth = 0;

        public double DockPanelWidth1 {
            get { return _dockPanelWidth1; }
            set {
                if (_dockPanelWidth1 != value) {
                    _dockPanelWidth1 = value;
                    OnPropertyChanged();
                }
            }
        }
        public double DockPanelWidth2 {
            get { return _dockPanelWidth2; }
            set {
                if (_dockPanelWidth2 != value) {
                    _dockPanelWidth2 = value;
                    OnPropertyChanged();
                }
            }
        }

        public MainWindow() {
            this.DataContext = this;
            InitializeComponent();
            this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight;
            this.MaxWidth = SystemParameters.MaximizedPrimaryScreenWidth;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e) {
            setDockPanelMainSize();
            ListViewMenu.SelectedIndex = 0;
        }

        private void Button_CloseApp_Click(object sender, RoutedEventArgs e) {
            Application.Current.Shutdown();
        }
        private void Button_MinimizeApp_Click(object sender, RoutedEventArgs e) {
            if (this.WindowState != WindowState.Minimized) {
                this.WindowState = WindowState.Minimized;
            }
        }

        private void Button_OpenMenu_Click(object sender, RoutedEventArgs e) {
            ButtonCloseMenu.Visibility = Visibility.Visible;
            ButtonOpenMenu.Visibility = Visibility.Collapsed;
            DockPanelWidth1 = DockPanelMain.Width;
            DockPanelWidth2 = DockPanelMain.Width - 130;
        }

        private void Button_CloseMenu_Click(object sender, RoutedEventArgs e) {
            ButtonCloseMenu.Visibility = Visibility.Collapsed;
            ButtonOpenMenu.Visibility = Visibility.Visible;
            DockPanelWidth1 = DockPanelMain.Width;
            DockPanelWidth2 = DockPanelMain.Width + 130;
        }

        private void ListViewMenu_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            //UserControl usc = null;
            DockPanelMain.Children.Clear();
            StackPanelTopTabs.Children.Clear();
            setDockPanelMainSize();

            switch (((ListViewItem)((ListView)sender).SelectedItem).Name) {
                case "SideButton_Products":
                    //UserControl_Home usc = new UserControl_Home();
                    //DockPanelMain.Children.Add(usc);
                    //UserControl usc = null;
                    //DockPanelMain.Children.Clear();
                    setDockPanelMainSize();
                    UserControl_Products usc = new UserControl_Products();
                    DockPanelMain.Children.Add(usc);
                    AddTabButton("Ürünler", usc.Name);
                    break;
                case "SideButton_Accounts":
                    UserControl_Accounts usc_account = new UserControl_Accounts();
                    //usc_account.SelectedAccount = this.accountMain;
                    DockPanelMain.Children.Add(usc_account);
                    AddTabButton("Cari Hesaplar", usc_account.Name);
                    break;
                case "SideButton_Sale":
                    UserControl_Sales usc_sales = new UserControl_Sales();
                    //usc_order.SelectedAccount = this.accountMain;
                    DockPanelMain.Children.Add(usc_sales);
                    AddTabButton("Satışlar", usc_sales.Name);
                    break;
                case "SideButton_Purchase":
                    UserControl_Purchase usc_conversation = new UserControl_Purchase();
                    //usc_conversation.SelectedAccount = this.accountMain;
                    DockPanelMain.Children.Add(usc_conversation);
                    AddTabButton("Alışlar", usc_conversation.Name);
                    break;
                case "SideButton_Users":
                    UserControl_Users usc_comm = new UserControl_Users();
                    //usc_comm.SelectedAccount = this.accountMain;
                    DockPanelMain.Children.Add(usc_comm);
                    AddTabButton("Kullanıcılar", usc_comm.Name);
                    break;
                case "SideButton_Settigns":
                    //UserControl_Communicate usc_comm = new UserControl_Communicate();
                    //usc_comm.SelectedAccount = this.accountMain;
                    //DockPanelMain.Children.Add(usc_comm);
                    break;
                default:
                    break;
            }            
        }

        private void setDockPanelMainSize() {
            DockPanelMain.Height = this.Height - GridTopBar.Height;
            DockPanelMain.Width = this.Width - GridMenu.Width - 1;
        }

        private void Button_TheAdd_Click(object sender, RoutedEventArgs e) {
            if (DockPanelMain.Children.Count <= 0) {
                return;
            }
            //DockPanelMain.Children.Clear();

            if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {
                UserControl_AddProduct userControl_AddProduct = new UserControl_AddProduct();
                DockPanelMain.Children.Add(userControl_AddProduct);
                AddTabButton("Yeni Ürün", userControl_AddProduct.Name);
            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {

            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Accounts)) {

            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {

            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {

            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {

            }
            else if (DockPanelMain.Children[0].GetType() == typeof(UserControl_Products)) {

            }
            //Console.WriteLine(DockPanelMain.Children[0].GetType());
        }

        private void AddTabButton(string name, string tag) {
            //Button btn = this.Resources["usain"] as Button;
            //ColorZone btn = this.Resources["usain"] as ColorZone;
            //((TextBlock)LogicalTreeHelper.FindLogicalNode(btn, "ResourceButtonContent")).Text = name;

            //RadioButton rb = new RadioButton {
            //    Style = Application.Current.FindResource("MaterialDesignTabRadioButton") as Style,
            //    Margin = new Thickness(4),
            //    IsChecked = true,
            //    Content = name
            //};
            //var colorZone = this.Resources["usain"] as ColorZone;
            //var radioButtonTab = this.Resources["usain2"] as RadioButton;
            //radioButtonTab.Content = name;
            //var buttonTab = this.Resources["usain3"] as Button;
            //var stackPanelTab = LogicalTreeHelper.FindLogicalNode(colorZone, "TabButtonPanel") as StackPanel;

            //stackPanelTab.Children.Add(radioButtonTab);
            //stackPanelTab.Children.Add(buttonTab);
            //StackPanelTopTabs.Children.Add(colorZone);

            //var chip = this.Resources["usain"] as Chip;
            //chip.Content = name;

            var chip = new Chip {
                Content = name,
                IsDeletable = true,
                ToolTip = name,
                Tag = tag,
                DeleteToolTip = "Kapat"
            };
            chip.Click += new RoutedEventHandler(ButtonsDemoChip_OnClick);
            chip.DeleteClick += new RoutedEventHandler(ButtonsDemoChip_OnDeleteClick);
            StackPanelTopTabs.Children.Add(chip);
        }

        private void ButtonsDemoChip_OnClick(object sender, RoutedEventArgs e) {

        }

        private void ButtonsDemoChip_OnDeleteClick(object sender, RoutedEventArgs e) {
            //var chipElement = sender as UIElement;
            var chipElement = sender as Chip;
            StackPanelTopTabs.Children.Remove(chipElement);
            var addedUserControl = UIHelper.FindChild<UserControl>(DockPanelMain, (string)chipElement.Tag);
            DockPanelMain.Children.Remove(addedUserControl);
            Console.WriteLine(DockPanelMain.Children.Count);

            if (DockPanelMain.Children.Count == 0) {
                //DockPanelMain.Children.RemoveAt(DockPanelMain.Children.Count);
                ListViewMenu.SelectedIndex = 0;
            }
        }

    }
}
